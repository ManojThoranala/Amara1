package histograms;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;
import java.awt.image.WritableRaster;
import java.io.File;
import java.io.IOException;
import java.util.Random;
import java.util.Scanner;
import javax.imageio.ImageIO;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;

/**
 *
 * @author Manoj
 */
public class Histograms {
public static int GRAYLEVEL = 256;
	public static int IMAGESIZE = 256;
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        
        
        EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Histograms();
            }
        });
           int number;
        Scanner reader = new Scanner(System.in);  
        System.out.println("Enter your choice");
        //System.out.println("1.Histogram Plot");
System.out.println("1.Histogram Equalization");
System.out.println("2.Histogram Specification");
System.out.println("3.Quit");

int n = 0;
while(n!=3){
    n = reader.nextInt();
switch(n){
    
    
    
    case 1:equali();
    break;
    
    case 2:specific();
    break;
    
    case 3:System.exit(0);
    
}
    
}
        
       
    }

    public int[][] getPixels(BufferedImage image) {
        int iw = image.getWidth();
        int ih = image.getHeight();
        int[][] pixels = new int[iw][ih];
        
        if (image.getType() == 5){
            DataBufferByte db = (DataBufferByte)image.getRaster().getDataBuffer();
            byte[] pixelarray = db.getData();
            
            for (int x = 0; x < iw; x++ ) {
                for (int y = 0; y < ih; y++ ) {
                    pixels[x][y] = pixelarray[x + y * iw] &0xFF;
                }
            }
        }
        
        return pixels;
    }
    
    public Histograms() {
    	
   	 	File file = new File("G:\\lena_gray_256.jpg");
   	 	BufferedImage image;
        int [] histogram;

   	 	try {
			image = ImageIO.read(file);

	        if(image.getType() == 10){
	            histogram = new int[256];
	        } else {
	            histogram = new int[2001];
	        }
	        int[][] pixels = getPixels(image);
	       
	        for (int x = 0; x < pixels.length; x++){
	            for (int y = 0; y < pixels[0].length; y++){
	                histogram[pixels[x][y]]++;
	            }
	        }
   	 	
        JFrame frame = new JFrame("Test");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLayout(new BorderLayout());
        frame.add(new JScrollPane(new Graph(histogram)));
        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);}
   	 	catch(IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 
        
    }

    protected class Graph extends JPanel {

        protected static final int MIN_BAR_WIDTH = 4;
        private int[] histogram;

        public Graph(int[] histogram) {
            this.histogram = histogram;
            int width = (histogram.length * MIN_BAR_WIDTH) + 11;
            Dimension minSize = new Dimension(width, 128);
            Dimension prefSize = new Dimension(width, 256);
            setMinimumSize(minSize);
            setPreferredSize(prefSize);
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            if (histogram != null) {
                int xOffset = 5;
                int yOffset = 5;
                int width = getWidth() - 1 - (xOffset * 2);
                int height = getHeight() - 1 - (yOffset * 2);
                Graphics2D g2d = (Graphics2D) g.create();
                g2d.setColor(Color.DARK_GRAY);
                g2d.drawRect(xOffset, yOffset, width, height);
                int barWidth = Math.max(MIN_BAR_WIDTH,
                        (int) Math.floor((float) width
                        / (float) histogram.length));
                //System.out.println("width = " + width + "; size = "
                        //+ histogram.length + "; barWidth = " + barWidth);
                int maxValue = 0;
                for (int i=0;i<histogram.length;i++) {
                    int value = histogram[i];
                    maxValue = Math.max(maxValue, value);
                }
                int xPos = xOffset;
                for (int i=0;i<histogram.length;i++) {
                    int value = histogram[i];
                    int barHeight = Math.round(((float) value
                            / (float) maxValue) * height);
                    g2d.setColor(new Color(12, 16, 116));
                    int yPos = height + yOffset - barHeight;
//Rectangle bar = new Rectangle(xPos, yPos, barWidth, barHeight);
                    Rectangle2D bar = new Rectangle2D.Float(
                            xPos, yPos, barWidth, barHeight);
                    g2d.fill(bar);
                    g2d.setColor(Color.DARK_GRAY);
                    g2d.draw(bar);
                    xPos += barWidth;
                }
                g2d.dispose();
            }
        }
    }
     
    

    private static void equali() {
        int width = 963;    //width of the image
    int height = 640;   //height of the image
    BufferedImage image = null;
    File f = null;

    //read image
    try{
      f = new File("G:\\lena_gray_256.jpg"); //image file path
      image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
      image = ImageIO.read(f);
      System.out.println("Reading complete.");
      BufferedImage translatedImage = histo(image);
      ImageIO.write(translatedImage, "jpg", new File("G:\\diva_output\\lena_gray_256_histo.jpg"));
      System.out.println("Histogram of the image");
    }catch(IOException e){
      System.out.println("Error: "+e);
    }
      
        // TODO code application logic here
    }
    
     public static BufferedImage histo( BufferedImage src ){
    BufferedImage nImg = new BufferedImage(src.getWidth(), src.getHeight(),
                         BufferedImage.TYPE_BYTE_GRAY);
    WritableRaster wr = src.getRaster();
    WritableRaster er = nImg.getRaster();
    int totpix= wr.getWidth()*wr.getHeight();
    int[] histogram = new int[256];

    for (int x = 0; x < wr.getWidth(); x++) {
        for (int y = 0; y < wr.getHeight(); y++) {
            histogram[wr.getSample(x, y, 0)]++;
        }
    }

    int[] chistogram = new int[256];
    chistogram[0] = histogram[0];
    for(int i=1;i<256;i++){
        chistogram[i] = chistogram[i-1] + histogram[i];
    }

    float[] arr = new float[256];
    for(int i=0;i<256;i++){
        arr[i] =  (float)((chistogram[i]*255.0)/(float)totpix);
    }

    for (int x = 0; x < wr.getWidth(); x++) {
        for (int y = 0; y < wr.getHeight(); y++) {
            int nVal = (int) arr[wr.getSample(x, y, 0)];
            er.setSample(x, y, 0, nVal);
        }
    }
    nImg.setData(er);
    return nImg;
} //To change body of generated methods, choose Tools | Templates.

    private static void specific() {
        int[] histogram = new int[GRAYLEVEL];
		int[] newHistogram = new int[GRAYLEVEL];
		int[] equalized = new int[GRAYLEVEL];
		int i, j; /* control variable */

		/* Calculation of histogram */
		for (i = 0; i < GRAYLEVEL; i++) {
			histogram[i] = 0;
			newHistogram[i] = 0;
			equalized[i] = 0;
		}
		File file = new File("G:\\lena_gray_256.jpg");
        BufferedImage img;
		try {
			img = ImageIO.read(file);
			int width = img.getWidth();
			int height = img.getHeight();
			WritableRaster wr = img.getRaster();
			
			int[][] newData = new int[width][height];
			int[][] lookup = new int[width][height];
			Random rand = new Random();
			
			for (int x = 0; x < width; x++) {
				for (int y = 0; y < height; y++) {
					newData[x][y] = rand.nextInt(256); // generate the new data
					histogram[wr.getSample(x, y, 0)]++; // at the same time, populate the original
					newHistogram[newData[x][y]]++; // and populate the newHistogram
					// lookup[x][y] = Math.abs(newData[x][y] - data.getPixel(x, y));
				}
			}

			for (i = 0; i < GRAYLEVEL; i++) {
				int tmp = Math.abs(Math.min(histogram[i], newHistogram[i]));
				int index = 0;
				for (j = 0; j < GRAYLEVEL; j++) {
					int r = Math.abs(Math.min(histogram[i], newHistogram[j]));
					if (r <= tmp) {
						tmp = r;
						index = j;
					}
				}
				equalized[i] = newHistogram[index];
			}

			for (i = 0; i < width; i++) {
				for (j = 0; j < height; j++) {
					lookup[i][j] = wr.getSample(i, j, 0) + Math.abs(equalized[j % GRAYLEVEL]);
				}
			}

			BufferedImage theImage = new BufferedImage(width, height,img.getType());
			WritableRaster er = theImage.getRaster();
			for (int x = 0; x < width; x++) {
				for (int y = 0; y < height; y++) {
					er.setSample(x, y, 0, lookup[x][y]);
				}
			}
			theImage.setData(er);
			File outputfile = new File("G:\\diva_output\\lena_gray_256_specifiction.jpg");
	        ImageIO.write(theImage, "jpg", outputfile);
		}
		catch(IOException e)
		{
			e.printStackTrace();
		}
		
	} //To change body of generated methods, choose Tools | Templates.
    
    
//To change body of generated methods, choose Tools | Templates.
    }
    

