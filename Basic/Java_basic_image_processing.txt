/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pkgfinal;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.FlowLayout;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.BufferedImageOp;
import java.awt.image.ConvolveOp;
import java.awt.image.DataBufferByte;
import java.awt.image.Kernel;
import java.io.File;
import java.io.IOException;
import static java.lang.System.exit;
import java.util.Arrays;
import java.util.Scanner;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;

/**
 *
 * @author DELL
 */
public class Final {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws IOException {
        // TODO code application logic here
        
        int number;
        Scanner reader = new Scanner(System.in);  
        System.out.println("Enter your choice");
        
     
System.out.println("1.Read and Write");
System.out.println("2.Rotation");
System.out.println("3.Transition");
System.out.println("4.Negative");
System.out.println("5.Zooming");
System.out.println("6.Shrinking");
System.out.println("7.High Pass");
System.out.println("8.Low Pass");
System.out.println("9.Median Filter");
System.out.println("10.High Boost");
System.out.println("11.Exit");




int n = 0;
while(n!=11){
    n = reader.nextInt();
switch(n){

    case 1:ReadAndWrite();
    break;
    
    case 2:rotate();
    break;
    
    case 3:translate();
    break;
    
    case 4:negative();
    break;
    case 5:zoom();
    break;
    case 6:shrink();
    break;
    case 7:hpass();
    break;
    case 8:lpass();
    break;
    case 9:median();
    break;
    case 10:boost();
    break;
 
    case 11:System.exit(0);
    
    
}}

    }
     public static void ReadAndWrite()
     {
     
     int width = 963;    //width of the image
    int height = 640;   //height of the image
    BufferedImage image = null;
    File f = null;

    //read image
    try{
      f = new File("G:\\lena_gray_256.jpg"); //image file path
      image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
      image = ImageIO.read(f);
      System.out.println("Reading complete.");
    }catch(IOException e){
      System.out.println("Error: "+e);
    }

    //write image
    try{
      f = new File("G:\\diva_output\\lena_gray_256_write.bmp");  //output file path
      ImageIO.write(image, "jpg", f);
      System.out.println("Writing complete.");
    }catch(IOException e){
      System.out.println("Error: "+e);
    }
  }
     public static void rotate()
     {
     int width = 963;    //width of the image
    int height = 640;   //height of the image
    BufferedImage image = null;
    File f = null;

    //read image
    try{
      f = new File("G:\\lena_gray_256.jpg"); //image file path
      image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
      image = ImageIO.read(f);
      System.out.println("Reading complete.");
      BufferedImage translatedImage = rotates(image);
      ImageIO.write(translatedImage, "jpg", new File("G:\\diva_output\\lena_gray_256_rotate.jpg"));
      System.out.println("Rotated the image");
    }catch(IOException e){
      System.out.println("Error: "+e);
    }
        // TODO code application logic here
    }
    public static BufferedImage rotates( BufferedImage img )
{
    int         width  = img.getWidth();
    int         height = img.getHeight();
    BufferedImage   newImage = new BufferedImage( height, width, img.getType() );
 
    for( int i=0 ; i < width ; i++ )
        for( int j=0 ; j < height ; j++ )
            newImage.setRGB( height-1-j, i, img.getRGB(i,j) );
 
    return newImage;
}
    
    public static void translate()
    {
    int width = 963;    //width of the image
    int height = 640;   //height of the image
    BufferedImage image = null;
    File f = null;

    //read image
    try{
      f = new File("G:\\lena_gray_256.jpg"); //image file path
      image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
      image = ImageIO.read(f);
      System.out.println("Reading complete.");
      BufferedImage translatedImage = translate(image,50);
      ImageIO.write(translatedImage, "jpg", new File("G:\\diva_output\\lena_gray_256_translate.bmp"));
      System.out.println("Translated the image");

    }catch(IOException e){
      System.out.println("Error: "+e);
    }
}
    //write image
public static BufferedImage translate(BufferedImage image,int value) 
	{
		int w = image.getWidth();
		int h = image.getHeight();
		
	    BufferedImage translatedImage = new BufferedImage(w, h, image.getType());
	    for (int i = 0; i < w-value; i++) {
            for (int j = 0; j < h-value; j++) {
            	translatedImage.setRGB(i+value, j+value, image.getRGB(i, j));
            }
	    }
	    return translatedImage;
	}

    public static void negative() {
          int width = 963;    //width of the image
    int height = 640;   //height of the image
    BufferedImage image = null;
    File f = null;

    //read image
    try{
      f = new File("G:\\lena_gray_256.jpg"); //image file path
      image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
      image = ImageIO.read(f);
      System.out.println("Reading complete.");
      BufferedImage translatedImage = negatives(image);
      ImageIO.write(translatedImage, "jpg", new File("G:\\diva_output\\lena_gray_256_negative.jpg"));
      System.out.println("Negated the image");
    }catch(IOException e){
      System.out.println("Error: "+e);
    }
        // TODO code application logic here
    }
    public static BufferedImage negatives( BufferedImage img )
{
    int width = img.getWidth();
    int height = img.getHeight();
    //convert to negative
    for(int y = 0; y < height; y++){
      for(int x = 0; x < width; x++){
        int p = img.getRGB(x,y);
        int a = (p>>24)&0xff;
        int r = (p>>16)&0xff;
        int g = (p>>8)&0xff;
        int b = p&0xff;
        //subtract RGB from 255
        r = 255 - r;
        g = 255 - g;
        b = 255 - b;
        //set new RGB value
        p = (a<<24) | (r<<16) | (g<<8) | b;
        img.setRGB(x, y, p);
 
    
}}
    return img;
} //To change body of generated methods, choose Tools | Templates.

    public static void zoom() {
         int width = 963;    //width of the image
    int height = 640;   //height of the image
    BufferedImage image = null;
    File f = null;

    //read image
    try{
      f = new File("G:\\lena_gray_256.jpg"); //image file path
      image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
      image = ImageIO.read(f);
      System.out.println("Reading complete.");
      BufferedImage translatedImage = zoomImage(image,50);
      ImageIO.write(translatedImage, "jpg", new File("G:\\diva_output\\lena_gray_256_zoom.jpg"));
      System.out.println("Zoomed the image");

    }catch(IOException e){
      System.out.println("Error: "+e);
    }}
        
        
         public static BufferedImage zoomImage(BufferedImage image, int zoom) {
        int width = image.getWidth();
        int height = image.getHeight();
        BufferedImage result = new BufferedImage(width * zoom,
                height * zoom,
                image.getType());
        int rgb;
        for (int x = 0; x < width; x++) {
            for (int y = 0; y < height; y++) {
                rgb = image.getRGB(x, y);
                for (int i = 0; i < zoom; i++) {
                    for (int j = 0; j < zoom; j++) {
                        result.setRGB(x * zoom + i,
                                y * zoom + j,
                                rgb);
                    }
                }
            }
        }
        return result;
    } //To change body of generated methods, choose Tools | Templates.

    private static void shrink() {
           String inputFile = "G:\\lena_gray_256.jpg";
		String shrinkedFile = "G:\\diva_output\\lena_gray_256_shrink.jpg";

		try {
			BufferedImage image = ImageIO.read(new File(inputFile));
			//For shrinking
			BufferedImage shrinkImage = shrink(image,0.5);
			ImageIO.write(shrinkImage, "jpg", new File(shrinkedFile));
			System.out.println("Shrinked the image");

		} catch (IOException e) {
		}		

    }
        
     public static BufferedImage shrink(BufferedImage image, double n) {

	    int w = (int)(n * image.getWidth());
	    int h = (int)(n * image.getHeight());

	    BufferedImage shrinkedImage = new BufferedImage(w, h, image.getType());

	    for (int y=0; y < h; ++y)
	        for (int x=0; x < w; ++x)
	        	shrinkedImage.setRGB(x, y, image.getRGB((int)(x/n), (int)(y/n)));

	    return shrinkedImage;

	} //To change body of generated methods, choose Tools | Templates.

    private static void hpass() {
         try {
 BufferedImage buff_original;
 buff_original = ImageIO.read(new File("G:\\lena_gray_256.jpg"));
 float val=1f/9f;
float[] lowpass={ val, val, val,val, val, val, val, val, val };
float [] allpass={0,0,0,0,1,0,0,0,0};
float [] output={0,0,0,0,0,0,0,0,0};
for(int i=0;i<=8;i++)
{
    
    output[i]=allpass[i]-lowpass[i];
    
    
}

 Kernel kernel = new Kernel(3, 3,output);
 BufferedImageOp ConOp = new ConvolveOp(kernel);
 buff_original = ConOp.filter(buff_original, null);
 JPanel content = new JPanel();
 content.setLayout(new FlowLayout());
 // label to load image
 content.add(new JLabel(new ImageIcon(buff_original)));
 JFrame f = new JFrame("High Pass Filtered Image ");
 f.addWindowListener(new WindowAdapter() {
 @Override
 public void windowClosing(WindowEvent e) {
 System.exit(0);
 }
 });
 f.setContentPane(content);
 f.pack();
 f.setVisible(true);
 } catch (IOException e) {
 }
        // TODO code application logic here
    } //To change body of generated methods, choose Tools | Templates.

    private static void lpass() {
              try {
 BufferedImage buff_original;
 buff_original = ImageIO.read(new File("G:\\lena_gray_256.jpg"));
 float val=1f/9f;
float[]data={ val, val, val,val, val, val, val, val, val };

 Kernel kernel = new Kernel(3, 3,data);
 BufferedImageOp ConOp = new ConvolveOp(kernel);
 buff_original = ConOp.filter(buff_original, null);
 JPanel content = new JPanel();
 content.setLayout(new FlowLayout());
 // label to load image
 content.add(new JLabel(new ImageIcon(buff_original)));
 JFrame f = new JFrame("Low Pass Filtered Image ");
 f.addWindowListener(new WindowAdapter() {
 @Override
 public void windowClosing(WindowEvent e) {
 System.exit(0);
 }
 });
 f.setContentPane(content);
 f.pack();
 f.setVisible(true);
 } catch (IOException e) {
 }
 } //To change body of generated methods, choose Tools | Templates.

    private static void median() throws IOException {
         File f=new File("G:\\lena_gray_256.jpg");                               //Input Photo File
        Color[] pixel=new Color[9];
        int[] Gray=new int[9];
        File output=new File("G:\\diva_output\\lena_gray_256_median.jpg");
        BufferedImage img=ImageIO.read(f);
        for(int i=1;i<img.getWidth()-1;i++)
            for(int j=1;j<img.getHeight()-1;j++)
            {
               pixel[0]=new Color(img.getRGB(i-1,j-1));
               pixel[1]=new Color(img.getRGB(i-1,j));
               pixel[2]=new Color(img.getRGB(i-1,j+1));
               pixel[3]=new Color(img.getRGB(i,j+1));
               pixel[4]=new Color(img.getRGB(i+1,j+1));
               pixel[5]=new Color(img.getRGB(i+1,j));
               pixel[6]=new Color(img.getRGB(i+1,j-1));
               pixel[7]=new Color(img.getRGB(i,j-1));
               pixel[8]=new Color(img.getRGB(i,j));
               for(int k=0;k<9;k++){
                   Gray[k]=pixel[k].getRGB();
               }
               Arrays.sort(Gray);
               
               img.setRGB(i,j,new Color(Gray[4]).getRGB());
            }
        ImageIO.write(img,"jpg",output);
    } //To change body of generated methods, choose Tools | Templates.
    

    private static void boost() {
       try {
 BufferedImage buff_original;
 buff_original = ImageIO.read(new File("G:\\lena_gray_256.jpg"));
 float val=1f/9f;
float[] lowpass={ val, val, val,val, val, val, val, val, val };
float [] allpass={0,0,0,0,1,0,0,0,0};
float [] highpass={0,0,0,0,0,0,0,0,0};
float [] highboost={0,0,0,0,0,0,0,0,0};
int c=4;
for(int i=0;i<=8;i++)
{
    
    highpass[i]=allpass[i]-lowpass[i];
    
    
    
}
for(int j=0;j<=8;j++)
{
highboost[j]=highpass[j]*c+allpass[j];

}


 Kernel kernel = new Kernel(3, 3,highboost);
 BufferedImageOp ConOp = new ConvolveOp(kernel);
 buff_original = ConOp.filter(buff_original, null);
 JPanel content = new JPanel();
 content.setLayout(new FlowLayout());
 // label to load image
 content.add(new JLabel(new ImageIcon(buff_original)));
 JFrame f = new JFrame("High Boost Filtered Image ");
 f.addWindowListener(new WindowAdapter() {
 @Override
 public void windowClosing(WindowEvent e) {
 System.exit(0);
 }
 });
 f.setContentPane(content);
 f.pack();
 f.setVisible(true);
 } catch (IOException e) {
 }
    } }

   

